apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.fachrudin.base"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0.0"
        multiDexEnabled true
        resConfigs "en"
        ndk {
            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    dataBinding {
        enabled = true
    }
    bundle {
        language { enableSplit = true }
        density { enableSplit = true }
        abi { enableSplit = true }
    }
    lintOptions {
        abortOnError false
        ignoreWarnings true
        quiet true
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/dependencies'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice'
        exclude 'META-INF/notice.txt'
        return void
    }
    signingConfigs {
        if (rootProject.file('signing-debug.properties').exists()) {
            def signingDebug = new Properties()
            signingDebug.load(new FileInputStream(rootProject.file('signing-debug.properties')))
            debug {
                storeFile rootProject.file(signingDebug.storeFile)
                storePassword signingDebug.storePassword
                keyAlias signingDebug.keyAlias
                keyPassword signingDebug.keyPassword
            }
        }
        if (rootProject.file('signing-release.properties').exists()) {
            def signingRelease = new Properties()
            signingRelease.load(new FileInputStream(rootProject.file('signing-release.properties')))
            release {
                storeFile rootProject.file(signingRelease.storeFile)
                storePassword signingRelease.storePassword
                keyAlias signingRelease.keyAlias
                keyPassword signingRelease.keyPassword
            }
        }
    }
    buildTypes {
        debug {
            buildConfigField 'String', 'API_SAMPLE', '"https://jsonplaceholder.typicode.com"'
            buildConfigField 'String', 'API_BASE', '"http://www.mocky.io/v2/"'
            minifyEnabled false
            debuggable true
            applicationIdSuffix ".debug"
            versionNameSuffix '-dev'
            signingConfig signingConfigs.debug
        }
        release {
            buildConfigField 'String', 'API_SAMPLE', '"https://jsonplaceholder.typicode.com"'
            buildConfigField 'String', 'API_BASE', '"http://www.mocky.io/v2/"'
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "base-${variant.versionName}(${variant.versionCode}).apk"
                }
            }
            signingConfig signingConfigs.release
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1'

    implementation 'androidx.appcompat:appcompat:1.1.0-beta01'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'

    // viewModel and livedata
    implementation "android.arch.lifecycle:extensions:$lifecycle_version"
    kapt "android.arch.lifecycle:compiler:$lifecycle_version"

    // lottie
    implementation 'com.airbnb.android:lottie:3.0.1'

    // dagger
//    implementation 'com.google.dagger:dagger:2.21'
//    kapt 'com.google.dagger:dagger-compiler:2.21'

    // eventBus
//    implementation 'org.greenrobot:eventbus:3.1.1'

    // network
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-moshi:2.5.0'
    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'
    implementation 'com.squareup.okhttp3:okhttp:3.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.0'
    debugImplementation 'com.ashokvarma.android:gander:1.4.0'
    releaseImplementation 'com.ashokvarma.android:gander-no-op:1.4.0'
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    kapt 'com.github.bumptech.glide:compiler:4.9.0'

    // android test
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.1.1'
    testImplementation 'org.mockito:mockito-core:2.24.0'
    testImplementation 'org.mockito:mockito-inline:2.24.0'

    androidTestImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
